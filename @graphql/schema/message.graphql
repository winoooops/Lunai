type TextContentBlock {
  text: String!
  type: String!
}

type RestResponse {
  success: Boolean!
  statusCode: Int!
}

type StreamOnResponse {
  streamType: String!
  streamStatus: String!
  chatId: String!
  messageId: String!
  content: [TextContentBlock]
}

type StreamDoneResponse {
  streamType: String!
  streamStatus: String!
  chatId: String!
  content: String!
  message: Message
}

type StreamCompleteResponse {
  streamType: String!
  streamStatus: String!
  chatId: String!
  content: String!
  message: Message
}

type Metadata {
  reasoning_content: String
}

type Message {
  content: [TextContentBlock] 
  role: String!
  timestamp: String!
  id: String!
  model: String!
  chatId: String!
  metadata: Metadata
}


type Subscription {
  messageStream: StreamOnResponse
  messageStreamDone: StreamDoneResponse
  reasoningStream: StreamOnResponse
  reasoningStreamDone: StreamDoneResponse
}

input TextContentBlockInput {
  text: String!
  type: String!
}

input MessageInput {
  content: [TextContentBlockInput]
  role: String!
}

type Query {
  messages: [Message]
  messagesFromChat(chatId: String!): [Message]
}

type Mutation {
  createTextReplyFromConversation(prompt: String!, chatId: String!): Message
  createTextReplyFromPrompt(prompt: String!): Message
  createStreamedTextReplyFromPrompt(prompt: String!): StreamCompleteResponse
  createStreamedTextReplyFromConversation(prompt: String!, chatId: String!): StreamCompleteResponse
}