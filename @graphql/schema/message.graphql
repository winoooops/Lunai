type TextContentBlock {
    text: String!
    type: String!
  }

type Metadata {
  reasoning_content: String
}

type Message {
  content: [TextContentBlock] 
  role: String!
  timestamp: String!
  id: String!
  model: String!
  chatId: String!
  metadata: Metadata
}

type MessageStream {
  chatId: String!
  messageId: String!
  content: [TextContentBlock]
}

type MessageStreamComplete {
  chatId: String!
  finalContent: String!
}

type ReasoningStream {
  chatId: String!
  messageId: String!
  content: [TextContentBlock]
}

type ReasoningStreamComplete {
  chatId: String!
  finalContent: String!
}

type Subscription {
  messageStream: MessageStream
  messageStreamComplete: MessageStreamComplete
  reasoningStream: ReasoningStream
  reasoningStreamComplete: ReasoningStreamComplete
}

input TextContentBlockInput {
  text: String!
  type: String!
}

input MessageInput {
  content: [TextContentBlockInput]
  role: String!
}

type Query {
  messages: [Message]
  messagesFromChat(chatId: String!): [Message]
}

type Mutation {
  createTextReplyFromConversation(prompt: String!, chatId: String!): Message
  createTextReplyFromPrompt(prompt: String!): Message
  createStreamedTextReplyFromPrompt(prompt: String!): Message
  createStreamedTextReplyFromConversation(prompt: String!, chatId: String!): Message
}