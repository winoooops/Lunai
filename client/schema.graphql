schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Chat {
  created_at: String!
  id: String!
  messages: [Message]
  title: String!
  updated_at: String!
}

input ChatInput {
  messages: [MessageInput]
  title: String
}

type Message {
  chatId: String!
  content: [TextContentBlock]
  id: String!
  model: String!
  role: String!
  timestamp: String!
}

input MessageInput {
  content: [TextContentBlockInput]
  role: String!
}

type MessageStream {
  chatId: String!
  content: [TextContentBlock]
  messageId: String!
}

type MessageStreamComplete {
  chatId: String!
  finalContent: String!
}

type Mutation {
  createChat(input: ChatInput!): Chat
  createStreamedTextReplyFromConversation(chatId: String!, prompt: String!): Message
  createStreamedTextReplyFromPrompt(prompt: String!): Message
  createTextReplyFromConversation(chatId: String!, prompt: String!): Message
  createTextReplyFromPrompt(prompt: String!): Message
  deleteChat(id: String!): Boolean
  updateChat(id: String!, input: ChatInput!): Chat
}

type Query {
  chats: [Chat]
  getChat(id: String!): Chat
  messages: [Message]
  messagesFromChat(chatId: String!): [Message]
}

type Subscription {
  chatAdded: Chat
  messageStream: MessageStream
  messageStreamComplete: MessageStreamComplete
}

type TextContentBlock {
  text: String!
  type: String!
}

input TextContentBlockInput {
  text: String!
  type: String!
}